name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  BUILD_DIR: build

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: 'latest'

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libcurl4-openssl-dev libpsl-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install curl libpsl

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install curl

      - name: Clean previous builds
        shell: bash
        run: rm -rf ${{ env.BUILD_DIR }}

      - name: Create build directory
        run: mkdir ${{ env.BUILD_DIR }}

      - name: Configure CMake
        run: cmake -S . -B ${{ env.BUILD_DIR }}

      - name: Build project
        run: cmake --build ${{ env.BUILD_DIR }} --config Release

      - name: "Diagnostic: List build output"
        run: ls -R ${{ env.BUILD_DIR }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: zuno-${{ runner.os }}-${{ github.ref_name }}
          path: |
            build/*.a
            build/*.lib
            build/*.dll
            build/*.dylib
            build/*.so
            build/*.h
            build/Release/*.a
            build/Release/*.lib
            build/Release/*.dll
            build/Release/*.dylib
            build/Release/*.so
            build/Release/*.h
            !**/*.cpp

  release:
    needs: build
    runs-on: ubuntu-latest
    env:
      ZUNO_VERSION: ${{ github.ref_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure Git
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Fetch full Git history and tags
      run: |
        git fetch --prune --unshallow || true
        git fetch --tags

    - name: Generate changelog from commits
      id: changelog
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
        else
          CHANGELOG=$(git log "$LAST_TAG"..HEAD --pretty=format:"- %s" --no-merges)
        fi
        {
          echo 'CHANGELOG<<EOF'
          echo "$LOG"
          echo 'EOF'
        } >> $GITHUB_ENV

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Rename assets to avoid conflicts
      run: |
        mkdir -p renamed
        for dir in artifacts/*; do
          os=$(basename "$dir" | tr '[:upper:]' '[:lower:]')
          if [ -d "$dir" ]; then
            find "$dir" -type f | while read file; do
              relpath="${file#$dir/}"         # Quita el prefijo del folder
              safe=$(echo "$relpath" | tr '/' '-')  # Reemplaza '/' por '-' para aplanar estructura
              cp "$file" "renamed/${os}-${safe}"
            done
          fi
        done

    - name: List renamed assets
      run: ls -lh renamed

    - name: Create GitHub release and upload assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.ZUNO_VERSION }}
        name: Zuno Rest Release ${{ env.ZUNO_VERSION }}
        body: |
          ðŸš€ New release of the Zuno Rest library
          Version: **${{ env.ZUNO_VERSION }}**

          ## Changes
          ${{ env.CHANGELOG }}
        files: renamed/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}