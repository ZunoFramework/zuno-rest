name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  BUILD_DIR: build

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: 'latest'

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libcurl4-openssl-dev libpsl-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install curl libpsl

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install curl

      - name: Clean previous builds (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: rm -rf ${{ env.BUILD_DIR }}

      - name: Clean previous builds (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (Test-Path $env:BUILD_DIR) {
            Remove-Item -Recurse -Force $env:BUILD_DIR
          } else {
            Write-Host "No build directory to clean"
          }



      - name: Create build directory
        run: mkdir ${{ env.BUILD_DIR }}

      - name: Configure CMake
        run: cmake -S . -B ${{ env.BUILD_DIR }}

      - name: Build project
        run: cmake --build ${{ env.BUILD_DIR }} --config Release

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            ${{ env.BUILD_DIR }}/libzuno-rest.a
            ${{ env.BUILD_DIR }}/Release/zuno-rest.lib

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Download all build artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts

      - name: Upload release assets (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: release-artifacts/build-ubuntu-latest/libzuno-rest.a
          asset_name: libzuno-rest-linux-${{ github.ref_name }}.a
          asset_content_type: application/octet-stream

      - name: Upload release assets (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: release-artifacts/build-macos-latest/libzuno-rest.a
          asset_name: libzuno-rest-macos-${{ github.ref_name }}.a
          asset_content_type: application/octet-stream

      - name: Upload release assets (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: release-artifacts/build-windows-latest/zuno-rest.lib
          asset_name: zuno-rest-windows-${{ github.ref_name }}.lib
          asset_content_type: application/octet-stream
